[settings]
# bash を用いて対話的なスクリプト実行を許可
idiomatic_version_file_enable_tools = ["bash"]

# ===== プロジェクト管理タスク =====

# 新規ローカルプロジェクト作成
# - local/配下にプロジェクトディレクトリを作成
# - git初期化、Python環境セットアップ（オプション）
# - tmuxinator設定生成＆セッション開始
[tasks.new]
description = "Create a new project directory, init git, optional Python venv, generate tmuxinator config, and start session"
shell = "bash -lc"
run = ['''
read -p "🆕 Project name: " name && \
read -p "📝 Project description: " description && \
base=$(ghq root)/local/$name && \
mkdir -p "$base" && \
cd "$base" && \
git init && \
read -p "Is this a Python project? (y/N): " is_py && \
if [[ "$is_py" =~ ^[Yy]$ ]]; then \
  uv venv; \
fi && \
mise_root_dir="$(ghq root)" && \
template_dir="$mise_root_dir/templates" && \
template_path="$template_dir/README.md.template" && \
if [ -f "$template_path" ]; then \
  sed "s/PROJECT_NAME/$name/g" "$template_path" > README.md; \
else \
  echo "# $name" > README.md && echo "" >> README.md && echo "## Description" >> README.md && echo "" >> README.md && echo "TODO: プロジェクトの説明を記載してください" >> README.md; \
fi && \
env_template_path="$template_dir/.env.template" && \
if [ -f "$env_template_path" ]; then \
  sed "s/PROJECT_NAME/$name/g" "$env_template_path" > .env; \
fi && \
envrc_template_path="$template_dir/.envrc.template" && \
if [ -f "$envrc_template_path" ]; then \
  sed "s/PROJECT_NAME/$name/g" "$envrc_template_path" > .envrc; \
fi && \
echo "$description" > .description && \
gitignore_template_path="$template_dir/.gitignore.template" && \
if [ -f "$gitignore_template_path" ]; then \
  sed "s/PROJECT_NAME/$name/g" "$gitignore_template_path" > .gitignore; \
fi && \
devcontainer_template_dir="$template_dir/.devcontainer" && \
if [ -d "$devcontainer_template_dir" ]; then \
  cp -rp "$devcontainer_template_dir" .; \
  chmod +x .devcontainer/launch.sh 2>/dev/null || true; \
  if [ -f ".devcontainer/devcontainer.json" ]; then \
    sed -i.bak "s|\"runArgs\": \\[|\"runArgs\": [\\n    \"--name=project-$name-container\",|" .devcontainer/devcontainer.json && \
    rm .devcontainer/devcontainer.json.bak; \
    echo "✅ Updated devcontainer.json with project-specific container name"; \
  fi; \
  echo "✅ Copied .devcontainer configuration"; \
else \
  echo "⚠️  .devcontainer template not found: $devcontainer_template_dir"; \
fi && \
claude_template_dir="$template_dir/claude" && \
if [ -d "$claude_template_dir" ]; then \
  claude_md_template="$claude_template_dir/CLAUDE.md" && \
  if [ -f "$claude_md_template" ]; then \
    cp "$claude_md_template" CLAUDE.md; \
    echo "✅ Copied CLAUDE.md"; \
  fi && \
  mkdir -p .claude/tasks && \
  task_template="$claude_template_dir/task_template.md" && \
  if [ -f "$task_template" ]; then \
    cp "$task_template" .claude/tasks/; \
    echo "✅ Copied task_template.md to .claude/tasks/"; \
  fi && \
  order_template="$claude_template_dir/order.md" && \
  if [ -f "$order_template" ]; then \
    cp "$order_template" .claude/; \
    echo "✅ Copied order.md to .claude/"; \
  fi && \
  settings_template="$claude_template_dir/settings.json" && \
  if [ -f "$settings_template" ]; then \
    cp "$settings_template" .claude/; \
    echo "✅ Copied settings.json to .claude/"; \
  fi && \
  mcp_template="$claude_template_dir/.mcp.json" && \
  if [ -f "$mcp_template" ]; then \
    cp "$mcp_template" .mcp.json; \
    echo "✅ Copied .mcp.json"; \
  fi; \
else \
  echo "⚠️  claude template not found: $claude_template_dir"; \
fi && \
tmux_template_path="$template_dir/tmuxinator.yml.template" && \
if [ -f "$tmux_template_path" ]; then \
  mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator" && sed -e "s/PROJECT_NAME/$name/g" -e "s|PROJECT_ROOT|$base|g" "$tmux_template_path" > "${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$name.yml"; \
else \
  echo "⚠️  tmuxinator template not found: $tmux_template_path"; \
fi

echo "✅ Project '$name' created successfully!"
echo "📁 Location: $base"
echo "🔧 Tmuxinator config: ${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$name.yml"
echo ""
echo "🚀 To start working on this project, run:"
echo "   mise enter"
''']

# ローカルプロジェクトをGitHubに公開
# - local/配下のプロジェクトを選択
# - GitHubリポジトリ作成（public/private選択可能）
# - github.com/配下に自動移動
# - tmuxinator設定ファイルのパス更新
[tasks.publish]
description = "Select a local project and publish it to GitHub"
shell = "bash -lc"
run = ['''
# local配下のプロジェクトを選択
local_projects=$(find $(ghq root)/local -maxdepth 1 -type d -name "*" | sed "s|$(ghq root)/local/||" | grep -v "^$")
if [ -z "$local_projects" ]; then
  echo "❌ No local projects found"
  exit 1
fi

selected=$(echo "$local_projects" | fzf --prompt="📦 Select local project to publish: ")
if [ -z "$selected" ]; then
  echo "❌ No project selected"
  exit 1
fi

project_path=$(ghq root)/local/$selected
cd "$project_path"

# GitHubリポジトリ作成
read -p "🔗 GitHub repository name (default: $selected): " repo_name
repo_name=${repo_name:-$selected}

# .descriptionファイルから説明を取得
if [ -f ".description" ]; then
  auto_description=$(cat .description)
  echo "📝 Auto-detected description: $auto_description"
  read -p "📝 Use this description? (Y/n): " use_auto_desc
  if [[ "$use_auto_desc" =~ ^[Nn]$ ]]; then
    read -p "📝 Repository description: " description
  else
    description="$auto_description"
  fi
else
  read -p "📝 Repository description: " description
fi

read -p "🔓 Make repository public? (y/N): " is_public

if [[ "$is_public" =~ ^[Yy]$ ]]; then
  visibility="--public"
else
  visibility="--private"
fi

# GitHub CLIでリポジトリ作成
gh repo create "$repo_name" $visibility --description "$description" --source=. --remote=origin

# .descriptionファイルを削除（GitHubにpushしない）
if [ -f ".description" ]; then
  echo "🗑️  Removing .description file before push..."
  rm .description
  git add .description 2>/dev/null || true
  git commit -m "Remove .description file before GitHub publish" || true
fi

# GitHubにpush
echo "📤 Pushing to GitHub..."
git push origin main

# README.mdからトピックを読み取ってGitHub Topicsを設定
if [ -f "README.md" ]; then
  echo "🏷️  Reading topics from README.md..."
  topics=$(sed -n '/^## Topics/,/^## /p' README.md | grep '^- ' | sed 's/^- //' | grep -v '^$')
  if [ -n "$topics" ]; then
    topic_args=""
    echo "$topics" | while read -r topic; do
      if [ -n "$topic" ]; then
        echo "🏷️  Adding topic: $topic"
        gh repo edit --add-topic "$topic"
      fi
    done
  else
    echo "ℹ️  No topics found in README.md Topics section"
  fi
else
  echo "⚠️  README.md not found, skipping topic setup"
fi

# GitHub上のリポジトリ情報を取得
github_user=$(gh api user --jq .login)
github_url="https://github.com/$github_user/$repo_name"

# ghq管理下のgithub.comディレクトリに移動
github_path=$(ghq root)/github.com/$github_user/$repo_name
mkdir -p "$(dirname "$github_path")"

# プロジェクトを移動
echo "📦 Moving project to GitHub directory..."
mv "$project_path" "$github_path"

# tmuxinator設定ファイルのパスを更新
tmux_config="${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$selected.yml"
if [ -f "$tmux_config" ]; then
  echo "🔧 Updating tmuxinator configuration..."
  sed -i.bak "s|root: .*|root: $github_path|" "$tmux_config"
  rm "$tmux_config.bak"
fi

echo "✅ Repository published to GitHub: $github_url"
echo "📁 Project moved to: $github_path"
echo "🔧 Tmuxinator config updated"
echo "🔗 You can now use 'mise enter' to work on this project"
''']

# プロジェクト削除
# - ghq管理下の全プロジェクトを表示（local/、github.com/両方含む）
# - 選択したプロジェクトのディレクトリとtmuxinator設定を削除
# - 詳細情報表示後、確認プロンプト付きで安全に削除
[tasks.delete]
description = "Select and delete a project directory and its tmuxinator config with confirmation"
shell = "bash -lc"
run = ['''
# ghq管理下のプロジェクト一覧を取得
projects=$(ghq list)
if [ -z "$projects" ]; then
  echo "❌ No projects found"
  exit 1
fi

# プロジェクト選択
selected=$(echo "$projects" | fzf --prompt="🗑️  Select project to DELETE: ")
if [ -z "$selected" ]; then
  echo "❌ No project selected"
  exit 1
fi

project_path=$(ghq root)/$selected
project_name=$(basename "$selected")
readme_path="$project_path/README.md"

# プロジェクト情報を詳細表示
echo "🗑️  Project Deletion Confirmation"
echo "=================================="
echo "📁 Project Name: $project_name"
echo "📍 Directory: $project_path"
echo "🔧 Tmuxinator Config: ${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$project_name.yml"
echo "🌐 Type: $(dirname "$selected" | sed 's|.*/||')"
echo ""

# ディレクトリ内容表示
if [ -d "$project_path" ]; then
  echo "📋 Directory Contents:"
  ls -la "$project_path" | head -10
  file_count=$(find "$project_path" -type f | wc -l)
  echo "   Total files: $file_count"
  echo ""
fi

# Git情報表示
if [ -d "$project_path/.git" ]; then
  echo "📊 Git Information:"
  cd "$project_path"
  commit_count=$(git rev-list --count HEAD 2>/dev/null || echo "0")
  last_commit=$(git log -1 --format="%ar" 2>/dev/null || echo "未コミット")
  echo "   Commits: $commit_count"
  echo "   Last commit: $last_commit"
  
  # 未コミット変更確認
  if [ -n "$(git status --porcelain 2>/dev/null)" ]; then
    echo "   ⚠️  Uncommitted changes detected!"
    git status --porcelain
  fi
  echo ""
fi

# プロジェクト情報表示
if [[ "$selected" == github.com/* ]]; then
  # GitHub情報を取得・表示
  repo_path="${selected#github.com/}"
  echo "🌐 GitHub Repository Information:"
  echo "═══════════════════════════════════════"
  
  # GitHub情報を取得
  if gh_info=$(gh repo view "$repo_path" --json name,description,url,isPrivate 2>/dev/null); then
    repo_name=$(echo "$gh_info" | jq -r '.name')
    repo_description=$(echo "$gh_info" | jq -r '.description // "No description"')
    repo_url=$(echo "$gh_info" | jq -r '.url')
    is_private=$(echo "$gh_info" | jq -r '.isPrivate')
    
    echo "📝 Name: $repo_name"
    echo "📝 Description: $repo_description"
    echo "🔗 URL: $repo_url"
    echo "🔒 Visibility: $([ "$is_private" = "true" ] && echo "Private" || echo "Public")"
  else
    echo "⚠️  GitHub情報の取得に失敗しました"
  fi
  echo "═══════════════════════════════════════"
  echo ""
else
  # ローカルプロジェクト情報表示
  echo "💻 Local Project Information:"
  echo "═══════════════════════════════════════"
  
  # .descriptionファイルから説明を取得
  description_file="$project_path/.description"
  if [ -f "$description_file" ]; then
    local_description=$(cat "$description_file")
    echo "📝 Description: $local_description"
  else
    echo "📝 Description: No description available"
  fi
  echo "═══════════════════════════════════════"
  echo ""
fi

echo "⚠️  WARNING: This action cannot be undone!"
echo "To confirm deletion, type 'DELETE' (all uppercase):"
read -r confirmation

if [ "$confirmation" != "DELETE" ]; then
  echo "❌ Deletion cancelled."
  exit 0
fi

# ディレクトリ削除
if [ -d "$project_path" ]; then
  rm -rf "$project_path"
  echo "✅ Deleted directory: $project_path"
else
  echo "⚠️  Directory not found: $project_path"
fi

# tmuxセッション終了
if tmux has-session -t "$project_name" 2>/dev/null; then
  tmux kill-session -t "$project_name"
  echo "✅ Killed tmux session: $project_name"
else
  echo "ℹ️  No active tmux session: $project_name"
fi

# tmuxinator設定削除
tmux_config="${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$project_name.yml"
if [ -f "$tmux_config" ]; then
  rm "$tmux_config"
  echo "✅ Deleted tmuxinator config: $tmux_config"
else
  echo "⚠️  Tmuxinator config not found: $tmux_config"
fi

echo "🗑️  Project '$project_name' has been completely removed"
''']

# プロジェクト一覧と詳細表示
# - ghq管理下の全プロジェクトを表示（local/、github.com/両方含む）
# - 選択したプロジェクトのREADME.mdからDescription部分を抽出して表示
# - プロジェクトの基本情報も併せて表示
[tasks.info]
description = "List projects and show details of selected project"
shell = "bash -lc"
run = ['''
# ghq管理下のプロジェクト一覧を取得
projects=$(ghq list)
if [ -z "$projects" ]; then
  echo "❌ No projects found"
  exit 1
fi

# プロジェクト選択
selected=$(echo "$projects" | fzf --prompt="📂 Select project to view details: ")
if [ -z "$selected" ]; then
  echo "❌ No project selected"
  exit 1
fi

project_path=$(ghq root)/$selected
project_name=$(basename "$selected")
readme_path="$project_path/README.md"

echo "📂 Project: $project_name"
echo "📁 Location: $project_path"
echo "🌐 Type: $(dirname "$selected" | sed 's|.*/||')"
echo ""

# プロジェクト情報表示
if [[ "$selected" == github.com/* ]]; then
  # GitHub情報を取得・表示
  repo_path="${selected#github.com/}"
  echo "🌐 GitHub Repository Information:"
  echo "═══════════════════════════════════════"
  
  # GitHub情報を取得
  if gh_info=$(gh repo view "$repo_path" --json name,description,url,isPrivate 2>/dev/null); then
    repo_name=$(echo "$gh_info" | jq -r '.name')
    repo_description=$(echo "$gh_info" | jq -r '.description // "No description"')
    repo_url=$(echo "$gh_info" | jq -r '.url')
    is_private=$(echo "$gh_info" | jq -r '.isPrivate')
    
    echo "📝 Name: $repo_name"
    echo "📝 Description: $repo_description"
    echo "🔗 URL: $repo_url"
    echo "🔒 Visibility: $([ "$is_private" = "true" ] && echo "Private" || echo "Public")"
  else
    echo "⚠️  GitHub情報の取得に失敗しました"
  fi
  
  echo "═══════════════════════════════════════"
else
  # ローカルプロジェクト情報表示
  echo "💻 Local Project Information:"
  echo "═══════════════════════════════════════"
  
  # .descriptionファイルから説明を取得
  description_file="$project_path/.description"
  if [ -f "$description_file" ]; then
    local_description=$(cat "$description_file")
    echo "📝 Description: $local_description"
  else
    echo "📝 Description: No description available"
  fi
  
  echo "═══════════════════════════════════════"
fi

# ローカルGit統計
if [ -d "$project_path/.git" ]; then
  cd "$project_path"
  commit_count=$(git rev-list --count HEAD 2>/dev/null || echo "0")
  last_commit=$(git log -1 --format="%ar" 2>/dev/null || echo "未コミット")
  echo "📊 Git統計:"
  echo "   コミット数: $commit_count"
  echo "   最終更新: $last_commit"
fi
''']

# 既存リポジトリのクローン
# - GitHubリポジトリをghq管理下にクローン
# - tmuxinator設定ファイルの自動生成
# - GitHub情報の取得とローカル設定
[tasks.clone]
description = "Clone an existing repository and set up tmuxinator config"
shell = "bash -lc"
run = ['''
# Git URLの入力を求める
read -p "🔗 Git repository URL: " git_url

if [ -z "$git_url" ]; then
  echo "❌ Git URL is required"
  echo "Examples:"
  echo "  SSH: git@github.com:user/repo.git or git@github.com:user/repo"
  echo "  HTTPS: https://github.com/user/repo or https://github.com/user/repo.git"
  exit 1
fi

# GitHubリポジトリ情報を抽出
if [[ "$git_url" =~ git@github\.com:([^/]+)/([^\.]+)(\.git)?$ ]]; then
  github_user="${BASH_REMATCH[1]}"
  repo_name="${BASH_REMATCH[2]}"
elif [[ "$git_url" =~ https://github\.com/([^/]+)/([^/\.]+)(\.git)?/?$ ]]; then
  github_user="${BASH_REMATCH[1]}"
  repo_name="${BASH_REMATCH[2]}"
else
  echo "❌ Invalid GitHub URL format"
  echo "Received: $git_url"
  echo "Supported formats:"
  echo "  SSH: git@github.com:user/repo.git or git@github.com:user/repo"
  echo "  HTTPS: https://github.com/user/repo or https://github.com/user/repo.git"
  exit 1
fi

echo "📦 Cloning repository: $github_user/$repo_name"

# ghqでクローン
if ! ghq get "$git_url"; then
  echo "❌ Failed to clone repository"
  exit 1
fi

# クローンされたディレクトリに移動
repo_path=$(ghq root)/github.com/$github_user/$repo_name
cd "$repo_path"

# GitHub情報を取得してdescriptionを設定
echo "🌐 Fetching GitHub repository information..."
if gh_info=$(gh repo view "$github_user/$repo_name" --json description 2>/dev/null); then
  gh_description=$(echo "$gh_info" | jq -r '.description // ""')
  if [ -n "$gh_description" ] && [ "$gh_description" != "null" ]; then
    echo "📝 Found description: $gh_description"
  fi
fi

# tmuxinator設定ファイルとdevcontainerの生成
mise_root_dir="$(ghq root)" && \
template_dir="$mise_root_dir/templates" && \
devcontainer_template_dir="$template_dir/.devcontainer" && \
if [ -d "$devcontainer_template_dir" ]; then \
  if [ -d ".devcontainer" ]; then \
    read -p "⚠️  .devcontainer directory already exists. Overwrite? (y/N): " overwrite_devcontainer; \
    if [[ "$overwrite_devcontainer" =~ ^[Yy]$ ]]; then \
      rm -rf .devcontainer; \
      cp -rp "$devcontainer_template_dir" .; \
      chmod +x .devcontainer/launch.sh 2>/dev/null || true; \
      echo "✅ Overwritten .devcontainer configuration"; \
    else \
      echo "ℹ️  Skipped .devcontainer configuration"; \
    fi; \
  else \
    cp -rp "$devcontainer_template_dir" .; \
    chmod +x .devcontainer/launch.sh 2>/dev/null || true; \
    if [ -f ".devcontainer/devcontainer.json" ]; then \
      sed -i.bak "s|\"runArgs\": \\[|\"runArgs\": [\\n    \"--name=project-$repo_name-container\",|" .devcontainer/devcontainer.json && \
      rm .devcontainer/devcontainer.json.bak; \
      echo "✅ Updated devcontainer.json with project-specific container name"; \
    fi; \
    echo "✅ Copied .devcontainer configuration"; \
  fi; \
else \
  echo "⚠️  .devcontainer template not found: $devcontainer_template_dir"; \
fi && \
claude_template_dir="$template_dir/claude" && \
if [ -d "$claude_template_dir" ]; then \
  overwrite_claude=false; \
  if [ -f "CLAUDE.md" ]; then \
    read -p "⚠️  CLAUDE.md already exists. Overwrite? (y/N): " overwrite_claude_md; \
    if [[ "$overwrite_claude_md" =~ ^[Yy]$ ]]; then \
      overwrite_claude=true; \
    else \
      echo "ℹ️  Skipped CLAUDE.md"; \
    fi; \
  else \
    overwrite_claude=true; \
  fi; \
  if [ "$overwrite_claude" = true ]; then \
    claude_md_template="$claude_template_dir/CLAUDE.md" && \
    if [ -f "$claude_md_template" ]; then \
      cp "$claude_md_template" CLAUDE.md; \
      echo "✅ Copied CLAUDE.md"; \
    fi; \
  fi; \
  if [ -d ".claude" ]; then \
    read -p "⚠️  .claude directory already exists. Overwrite? (y/N): " overwrite_claude_dir; \
    if [[ "$overwrite_claude_dir" =~ ^[Yy]$ ]]; then \
      rm -rf .claude; \
      mkdir -p .claude/tasks; \
      task_template="$claude_template_dir/task_template.md" && \
      if [ -f "$task_template" ]; then \
        cp "$task_template" .claude/tasks/; \
        echo "✅ Copied task_template.md to .claude/tasks/"; \
      fi; \
      order_template="$claude_template_dir/order.md" && \
      if [ -f "$order_template" ]; then \
        cp "$order_template" .claude/; \
        echo "✅ Copied order.md to .claude/"; \
      fi; \
      settings_template="$claude_template_dir/settings.json" && \
      if [ -f "$settings_template" ]; then \
        cp "$settings_template" .claude/; \
        echo "✅ Copied settings.json to .claude/"; \
      fi; \
    else \
      echo "ℹ️  Skipped .claude directory setup"; \
    fi; \
  else \
    mkdir -p .claude/tasks; \
    task_template="$claude_template_dir/task_template.md" && \
    if [ -f "$task_template" ]; then \
      cp "$task_template" .claude/tasks/; \
      echo "✅ Copied task_template.md to .claude/tasks/"; \
    fi; \
    order_template="$claude_template_dir/order.md" && \
    if [ -f "$order_template" ]; then \
      cp "$order_template" .claude/; \
      echo "✅ Copied order.md to .claude/"; \
    fi; \
    settings_template="$claude_template_dir/settings.json" && \
    if [ -f "$settings_template" ]; then \
      cp "$settings_template" .claude/; \
      echo "✅ Copied settings.json to .claude/"; \
    fi && \
    mcp_template="$claude_template_dir/.mcp.json" && \
    if [ -f "$mcp_template" ]; then \
      cp "$mcp_template" .mcp.json; \
      echo "✅ Copied .mcp.json"; \
    fi; \
  fi; \
else \
  echo "⚠️  claude template not found: $claude_template_dir"; \
fi && \
tmux_template_path="$template_dir/tmuxinator.yml.template" && \
if [ -f "$tmux_template_path" ]; then \
  mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator" && sed -e "s/PROJECT_NAME/$repo_name/g" -e "s|PROJECT_ROOT|$repo_path|g" "$tmux_template_path" > "${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$repo_name.yml"; \
else \
  echo "⚠️  tmuxinator template not found: $tmux_template_path"; \
fi

echo "✅ Repository cloned and configured successfully!"
echo "📁 Location: $repo_path"
echo "🔧 Tmuxinator config: ${XDG_CONFIG_HOME:-$HOME/.config}/tmuxinator/$repo_name.yml"
echo ""
echo "🚀 To start working on this project, run:"
echo "   mise enter"
''']

# 既存プロジェクトへのエントリ
# - ghq管理下の全プロジェクトを表示（local/、github.com/両方含む）
# - 選択したプロジェクトのtmuxinatorセッション開始
[tasks.enter]
description = "Select an existing ghq project via fzf and start its tmuxinator session"
shell = "bash -lc"
run = ['''
repo=$(ghq list | fzf) && \
name=$(basename "$repo") && \
# Start tmuxinator session for selected project
tmuxinator start "$name"
''']
